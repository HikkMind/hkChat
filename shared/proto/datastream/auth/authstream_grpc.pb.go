// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: authstream.proto

package authstream

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UserDataService_VerifyUserPassword_FullMethodName = "/authstream.UserDataService/VerifyUserPassword"
	UserDataService_RegisterNewUser_FullMethodName    = "/authstream.UserDataService/RegisterNewUser"
	UserDataService_SetRefreshToken_FullMethodName    = "/authstream.UserDataService/SetRefreshToken"
	UserDataService_FindRefreshToken_FullMethodName   = "/authstream.UserDataService/FindRefreshToken"
	UserDataService_UnsetRefreshToken_FullMethodName  = "/authstream.UserDataService/UnsetRefreshToken"
)

// UserDataServiceClient is the client API for UserDataService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserDataServiceClient interface {
	VerifyUserPassword(ctx context.Context, in *UserDataRequest, opts ...grpc.CallOption) (*UserDataResponse, error)
	RegisterNewUser(ctx context.Context, in *UserDataRequest, opts ...grpc.CallOption) (*UserDataResponse, error)
	SetRefreshToken(ctx context.Context, in *UserRefreshTokenRequest, opts ...grpc.CallOption) (*UserRefreshTokenResponse, error)
	FindRefreshToken(ctx context.Context, in *UserRefreshTokenRequest, opts ...grpc.CallOption) (*UserRefreshTokenResponse, error)
	UnsetRefreshToken(ctx context.Context, in *UserRefreshTokenRequest, opts ...grpc.CallOption) (*UserRefreshTokenResponse, error)
}

type userDataServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserDataServiceClient(cc grpc.ClientConnInterface) UserDataServiceClient {
	return &userDataServiceClient{cc}
}

func (c *userDataServiceClient) VerifyUserPassword(ctx context.Context, in *UserDataRequest, opts ...grpc.CallOption) (*UserDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserDataResponse)
	err := c.cc.Invoke(ctx, UserDataService_VerifyUserPassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDataServiceClient) RegisterNewUser(ctx context.Context, in *UserDataRequest, opts ...grpc.CallOption) (*UserDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserDataResponse)
	err := c.cc.Invoke(ctx, UserDataService_RegisterNewUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDataServiceClient) SetRefreshToken(ctx context.Context, in *UserRefreshTokenRequest, opts ...grpc.CallOption) (*UserRefreshTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserRefreshTokenResponse)
	err := c.cc.Invoke(ctx, UserDataService_SetRefreshToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDataServiceClient) FindRefreshToken(ctx context.Context, in *UserRefreshTokenRequest, opts ...grpc.CallOption) (*UserRefreshTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserRefreshTokenResponse)
	err := c.cc.Invoke(ctx, UserDataService_FindRefreshToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDataServiceClient) UnsetRefreshToken(ctx context.Context, in *UserRefreshTokenRequest, opts ...grpc.CallOption) (*UserRefreshTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserRefreshTokenResponse)
	err := c.cc.Invoke(ctx, UserDataService_UnsetRefreshToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserDataServiceServer is the server API for UserDataService service.
// All implementations must embed UnimplementedUserDataServiceServer
// for forward compatibility.
type UserDataServiceServer interface {
	VerifyUserPassword(context.Context, *UserDataRequest) (*UserDataResponse, error)
	RegisterNewUser(context.Context, *UserDataRequest) (*UserDataResponse, error)
	SetRefreshToken(context.Context, *UserRefreshTokenRequest) (*UserRefreshTokenResponse, error)
	FindRefreshToken(context.Context, *UserRefreshTokenRequest) (*UserRefreshTokenResponse, error)
	UnsetRefreshToken(context.Context, *UserRefreshTokenRequest) (*UserRefreshTokenResponse, error)
	mustEmbedUnimplementedUserDataServiceServer()
}

// UnimplementedUserDataServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUserDataServiceServer struct{}

func (UnimplementedUserDataServiceServer) VerifyUserPassword(context.Context, *UserDataRequest) (*UserDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyUserPassword not implemented")
}
func (UnimplementedUserDataServiceServer) RegisterNewUser(context.Context, *UserDataRequest) (*UserDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterNewUser not implemented")
}
func (UnimplementedUserDataServiceServer) SetRefreshToken(context.Context, *UserRefreshTokenRequest) (*UserRefreshTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRefreshToken not implemented")
}
func (UnimplementedUserDataServiceServer) FindRefreshToken(context.Context, *UserRefreshTokenRequest) (*UserRefreshTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindRefreshToken not implemented")
}
func (UnimplementedUserDataServiceServer) UnsetRefreshToken(context.Context, *UserRefreshTokenRequest) (*UserRefreshTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnsetRefreshToken not implemented")
}
func (UnimplementedUserDataServiceServer) mustEmbedUnimplementedUserDataServiceServer() {}
func (UnimplementedUserDataServiceServer) testEmbeddedByValue()                         {}

// UnsafeUserDataServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserDataServiceServer will
// result in compilation errors.
type UnsafeUserDataServiceServer interface {
	mustEmbedUnimplementedUserDataServiceServer()
}

func RegisterUserDataServiceServer(s grpc.ServiceRegistrar, srv UserDataServiceServer) {
	// If the following call pancis, it indicates UnimplementedUserDataServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UserDataService_ServiceDesc, srv)
}

func _UserDataService_VerifyUserPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDataServiceServer).VerifyUserPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserDataService_VerifyUserPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDataServiceServer).VerifyUserPassword(ctx, req.(*UserDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserDataService_RegisterNewUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDataServiceServer).RegisterNewUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserDataService_RegisterNewUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDataServiceServer).RegisterNewUser(ctx, req.(*UserDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserDataService_SetRefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRefreshTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDataServiceServer).SetRefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserDataService_SetRefreshToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDataServiceServer).SetRefreshToken(ctx, req.(*UserRefreshTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserDataService_FindRefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRefreshTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDataServiceServer).FindRefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserDataService_FindRefreshToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDataServiceServer).FindRefreshToken(ctx, req.(*UserRefreshTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserDataService_UnsetRefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRefreshTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDataServiceServer).UnsetRefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserDataService_UnsetRefreshToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDataServiceServer).UnsetRefreshToken(ctx, req.(*UserRefreshTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserDataService_ServiceDesc is the grpc.ServiceDesc for UserDataService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserDataService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "authstream.UserDataService",
	HandlerType: (*UserDataServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "VerifyUserPassword",
			Handler:    _UserDataService_VerifyUserPassword_Handler,
		},
		{
			MethodName: "RegisterNewUser",
			Handler:    _UserDataService_RegisterNewUser_Handler,
		},
		{
			MethodName: "SetRefreshToken",
			Handler:    _UserDataService_SetRefreshToken_Handler,
		},
		{
			MethodName: "FindRefreshToken",
			Handler:    _UserDataService_FindRefreshToken_Handler,
		},
		{
			MethodName: "UnsetRefreshToken",
			Handler:    _UserDataService_UnsetRefreshToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "authstream.proto",
}
